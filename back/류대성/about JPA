JPA 는 Java Persistence API (영속성: 프로그램을 종료해도 사라지지 않는 속성)
프로토콜 | 인터페이스 
둘다 약속(규칙)에 해당함
but 인터페이스는 상하관계가 존재하는 약속 - 제공자가 지정한대로 사용자가 지켜야함
프로토콜은 사용자들간의 관계가 동등함 - 협의를 통해 규칙을 제정 

JPA는 자바 표준 ORM 기술 - Object Relational Mapping
데이터 베이스에는 보통 varchar 형태로 String을 저장하는데 이는 자바의 객체형과 맞지 않는다.
해서 이를 자바의 객체인 String으로 바꾸는 것을 모델링이라고 함
ORM에서는 객체를 기준으로 테이블을 만드는 과정이고 이는 데이터베이스 중심에서 
객체 중심의 개발이 가능하게 함.

반복적인 CURD 작업을 생략
JPA는 전송된 쿼리에 대한 결과를 객체로 변경하는 과정을 함수로 제공하며 이로 인해 CRUD가 간단해짐

JPA는 영속성 컨텍스트를 가지고 있음
context - 모든 정보를 의미 
데이터 베이스에 저장하기 전 영속성 컨텍스트에 자바가 데이터를 던지면 그걸 받아서 영속성 컨텍스트가 다시 데이터 베이스에 저장
둘은 동기화가 되며 따라서 영속성 컨텍스트의 데이터가 삭제된다면 데이터베이스의 데이터도 삭제 
같은 객체에 대하여 수정이 이루어 졌을 때 조회만 하더라도 update가 가능하다. 

JPA는 DB와 OOP의 불일치성을 해결하기 위한 방법론을 제공 
데이터 베이스는 객체 저장 불가능하기 때문에 결국 연결되는 작위적 클래스를 만들어야하지만
ORM을 이용하면 객체 내부에 객체 저장을 하는 형식이 가능 

OOP 관점에서의 모델링 (상속, 콤포지션, 연관관계) 이 가능하다. 
방언 처리가 용이하여 Migration에 좋음, 유지보수에도 좋음.
